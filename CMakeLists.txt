cmake_minimum_required(VERSION 3.15)
project(ndn-cxx VERSION 0.9.0 LANGUAGES CXX)

include(GNUInstallDirs)
include(CheckIncludeFile)
include(CheckFunctionExists)

option(ENABLE_STATIC "Build static library" OFF)
option(ENABLE_SHARED "Build shared library" ON)
option(WITH_EXAMPLES "Build examples" OFF)
option(WITH_TESTS "Build all tests" OFF)
option(WITH_UNIT_TESTS "Build unit tests" OFF)
option(WITH_INTEGRATION_TESTS "Build integration tests" OFF)
option(WITH_BENCHMARKS "Build benchmarks" OFF)
option(WITH_TOOLS "Build tools" ON)
option(WITH_OSX_KEYCHAIN "Use macOS Keychain as default TPM (macOS only)" OFF)
option(WITHOUT_SQLITE_LOCKING "Disable filesystem locking in SQLite3 DB" OFF)
set(WITH_SANITIZER "" CACHE STRING "Enable sanitizers (address, thread, undefined, memory)") #changed the format
set_property(CACHE WITH_SANITIZER PROPERTY STRINGS address thread undefined memory)
# set(WITH_SANITIZER "Enable sanitizers" CACHE STRING "none, address, undefined, memory")
set(WITH_STACKTRACE "backtrace" CACHE STRING "Select stacktrace backend: backtrace, addr2line, basic, noop")

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF) # DISABLE CMAKE_CXX_EXTENSIONS  


# Dependencies
find_package(Threads REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(SQLite3 REQUIRED)
find_package(Doxygen)
find_package(Sphinx)

# Boost
set(BOOST_COMPONENTS chrono log thread)
if(WITH_UNIT_TESTS OR WITH_TESTS OR WITH_BENCHMARKS)
    list(APPEND BOOST_COMPONENTS unit_test_framework)
endif()
if(WITH_TOOLS)
    list(APPEND BOOST_COMPONENTS program_options)
endif()

if(NOT WITH_STACKTRACE STREQUAL "")
    list(APPEND BOOST_COMPONENTS stacktrace_${WITH_STACKTRACE})
endif()

if (WITH_TESTS OR WITH_UNIT_TESTS OR WITH_BENCHMARKS OR WITH_INTEGRATION_TESTS)
    list(APPEND BOOST_COMPONENTS unit_test_framework)
endif()

find_package(Boost 1.71 REQUIRED COMPONENTS ${BOOST_COMPONENTS})

# Stacktrace support
if(NOT WITH_STACKTRACE STREQUAL "")
    add_definitions(-DNDN_CXX_HAVE_STACKTRACE)
    add_definitions(-DBOOST_STACKTRACE_DYN_LINK)
endif()

# Sanitizer support
if(WITH_SANITIZER AND NOT WITH_SANITIZER STREQUAL "none")
    string(REPLACE "," ";" SANITIZER_LIST "${WITH_SANITIZER}")

    set(SANITIZER_FLAGS "")
    foreach(SAN ${SANITIZER_LIST})
        list(APPEND SANITIZER_FLAGS "-Werror" "-fsanitize=${SAN}" "-fno-omit-frame-pointer")
    endforeach()

    add_compile_options(${SANITIZER_FLAGS})
    add_link_options(${SANITIZER_FLAGS})
endif()

# Version header
string(REPLACE "." ";" VERSION_LIST "${PROJECT_VERSION}")
list(GET VERSION_LIST 0 VERSION_MAJOR)
list(GET VERSION_LIST 1 VERSION_MINOR)
list(GET VERSION_LIST 2 VERSION_PATCH)
math(EXPR VERSION_NUM "${VERSION_MAJOR} * 1000000 + ${VERSION_MINOR} * 1000 + ${VERSION_PATCH}")

set(VERSION_STRING "${PROJECT_VERSION}")
execute_process(
    COMMAND git describe --abbrev=8 --always --match ndn-cxx-*
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    OUTPUT_VARIABLE VERSION_BUILD
    ERROR_QUIET
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/ndn-cxx/version.hpp.in
    ${CMAKE_CURRENT_BINARY_DIR}/ndn-cxx/version.hpp
    @ONLY
)

# Gather sources
file(GLOB_RECURSE SOURCES CONFIGURE_DEPENDS
    ndn-cxx/*.cpp
    ndn-cxx/**/*.cpp
)
file(GLOB_RECURSE HEADERS CONFIGURE_DEPENDS
    ndn-cxx/*.hpp
    ndn-cxx/**/*.hpp
)

# Filter platform-specific sources
list(FILTER SOURCES EXCLUDE REGEX ".*-android.cpp$")
list(FILTER SOURCES EXCLUDE REGEX ".*-osx.cpp$")
list(FILTER SOURCES EXCLUDE REGEX ".*netlink.*.cpp$")

# Add source directory as include directory for all targets
include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})

# Main library
add_library(ndn-cxx ${SOURCES})
target_link_libraries(ndn-cxx PUBLIC
    Boost::boost
    Boost::chrono
    Boost::log
    Boost::thread
    $<$<BOOL:${WITH_STACKTRACE}>:Boost::stacktrace_${WITH_STACKTRACE}>
    OpenSSL::SSL
    OpenSSL::Crypto
    SQLite::SQLite3
    Threads::Threads
)
target_compile_definitions(ndn-cxx PRIVATE
    $<$<BOOL:${WITHOUT_SQLITE_LOCKING}>:DISABLE_SQLITE3_FS_LOCKING>
)

# Write all the defines to a header file
set(DEFINE_FILE ${CMAKE_CURRENT_BINARY_DIR}/ndn-cxx/detail/config.hpp)
file(WRITE ${DEFINE_FILE} "// This file is auto-generated by CMake\n")
foreach(define ${CMAKE_CXX_COMPILE_DEFINITIONS})
    file(APPEND ${DEFINE_FILE} "#define ${define}\n")
endforeach()
# Shared/static toggle
if(ENABLE_SHARED)
    set_target_properties(ndn-cxx PROPERTIES
        VERSION ${PROJECT_VERSION}
        SOVERSION ${VERSION_MAJOR}
    )
endif()

if(ENABLE_STATIC)
    add_library(ndn-cxx-static STATIC ${SOURCES})
    target_link_libraries(ndn-cxx-static PUBLIC ${LINK_LIBS})
endif()

# Installation
install(TARGETS ndn-cxx
        EXPORT ndn-cxxTargets
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
install(DIRECTORY ndn-cxx/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ndn-cxx
        FILES_MATCHING PATTERN "*.hpp")

#Tools, tests, examples
if(WITH_TOOLS)
    add_subdirectory(tools)
endif()
if(WITH_EXAMPLES)
    add_subdirectory(examples)
endif()
if(WITH_UNIT_TESTS OR WITH_TESTS OR WITH_INTEGRATION_TESTS OR WITH_BENCHMARKS)
    add_compile_definitions(-DNDN_CXX_WITH_TESTS)
    add_subdirectory(tests)
endif()

# Documentation
if(DOXYGEN_FOUND)
    set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/docs/doxygen.conf.in)
    set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/docs/doxygen.conf)

    configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)

    add_custom_target(doc_doxygen
        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating Doxygen documentation"
        VERBATIM)
endif()

if(SPHINX_FOUND)
    add_custom_target(doc_sphinx
        COMMAND sphinx-build -b html ${CMAKE_CURRENT_SOURCE_DIR}/docs ${CMAKE_CURRENT_BINARY_DIR}/docs/html
        COMMENT "Generating Sphinx documentation")
endif()

